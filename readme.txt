
            Sokoban Solver in Promela
                  Moti Ben-Ari
    http://www.weizmann.ac.il/sci-tea/benari/

    Copyright 2013 by Mordechai (Moti) Ben-Ari.

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.
  This program is distributed in the hope that it will be useful
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
  02111-1307, USA.

Introduction

This program implements a naive solver for Sokoban puzzles in Promela
for the Spin Model Checker. Since the solution of even relatively small
puzzles can be intractable, this program can serve as a testbed for
learning about hash functions, state compression, search diversity and
other features of Spin designed to improve running time and/or memory
use.

Software structure

The main program is in the file "sokoban.pml". It consists of a single
active process and inline definitions for moving the warehouse man and
for pushing boxes. The Sokoban configuration is stored in a
two-dimensional array board (using the Promela workaround of a
one-dimensional array of typedefs). The included file "print.pml"
contains inline definitions for printed moves, pushes and the board.
The files for the initial configuration are described below.

Solving a Sokoban puzzle

Verify the program using safety mode. When all the boxes are in goal
floor tiles, the statement "assert (boxes < in_goal)" will fail,
terminating the verification. A guided simulation will list the moves
and pushes needed to solve the puzzle.

Configuring a puzzle

The specific puzzle is initialized by the included files "puzzle.pml"
and "sizes.pml". "sizes.pml" contains "#define" macros for the number of
rows and columns while "puzzle.pml" contains assignment statements for
defining the tiles on the board and placing boxes and the warehouse man
on their tiles.

These files are generated by the Java program GenSokoban takes as input
a text file "x.txt" with a Sokoban board in xsb format. Its output
consists of the two files "x-puzzle.pml" and "x-sizes.pml". Copy these
to "puzzle.pml" and "sizes.pml" in a script before running Spin.

Example puzzles

The directory "yoshio" contains Promela puzzle files for the first
twenty puzzles of Yoshio Murase's handmade puzzles; see:
http://www.ne.jp/asahi/ai/yoshio/sokoban/index.html A standard laptop
found solutions for the smaller puzzles (all except 1, 8, 13, 14, 18,
20) using -DCOLLAPSE for state vector compression. Using bitstate
hashing (-DBITSTATE) with one gigabyte of memory (-G1), puzzles 1, 14,
18, 20 were solved.

NOTE: There was a bug in Spin when running bitstate hashing on this
program. The bug was fixed in version 6.2.4.
